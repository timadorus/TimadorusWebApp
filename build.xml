<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project basedir="." default="build" name="TimadorusWebApp" xmlns:ivy="antlib:org.apache.ivy.ant">

	<!-- Beschreibt die Umgebung für die diese Datei verwendet wird -->
	<property environment="env" />

	<!-- set the debug level -->
	<property name="debuglevel" value="source,lines,vars" />

	<!-- path to the java source files -->
	<property name="src.dir" value="${basedir}/src" />
	<property name="test-src.dir" value="${basedir}/test-src" />

	<property name="lib.dir" value="${basedir}/lib"/>
	<property name="bin.dir" value="${basedir}/bin"/>

	<!-- root of the war hierarchy -->
	<property name="war.dir" value="${basedir}/war"/>

	<!-- destination folder for the classes compiled into the web application -->
	<property name="war.classes" value="${war.dir}/WEB-INF/classes" />

	<!-- lib folder within the web app. All jars needed to actually run the 
	     web app need to be copied into this
      -->
	<property name="war.lib" value="${war.dir}/WEB-INF/lib" />

	<!-- control of the java language version  -->
	<property name="target" value="1.6" />
	<property name="source" value="1.6" />

	<!--EMMA testing sources -->
	<property name="coverage.dir" value="${basedir}/coverage" />

	<property name="instrumented.bindir" value="${basedir}/instrumented.bin" description="loc. to store instrumented binaries" />
	<property name="test-report.dir" value="${basedir}/test-results" />
	<!--END EMMA -->

	<!-- ivy working folder -->
	<property name="ivy.dir" value="${basedir}/ivy" />
	<property name="ivy.settings.file" value="${ivy.dir}/ivysettings.xml" />
	<property name="ivy.cache.dir" value="${ivy.dir}/cache" />
	
	<!-- db and sql working folder -->
	<property name="sql.dir" value="${war.dir}/sql"/>
	<!-- <property name="db.dir" value="C:\Temp\TimadorusDB"/> -->
	<property name="db.dir" value="TimadorusDB"/>

	<!-- WebApp Artifactory Settings -->
	<property name="pub.version" value="0.1" />
	<property name="pub.status" value="integration" />
	<property name="pub.snapshot.resolver" value="timadorus-snapshot" />
	<property name="pub.release.resolver" value="timadorus-release" />

	<!-- path collection of all files relevant to the actual webapp -->
	<path id="TimadorusWebApp.classpath">

		<!-- source and compiled java files -->
		<pathelement location="${war.classes}" />
		<pathelement location="${src.dir}" />

		<!-- the jars from the webapp lib folder -->
		<fileset dir="${war.lib}">
			<include name="*.jar" />
		</fileset>

	</path>

	<path id="compile.classpath">
		<pathelement path="${java.class.path}/" />
		<fileset dir="${lib.dir}/compile">
			<include name="**/*.jar"/>
			<include name="**/*.zip"/>
		</fileset>

		<fileset dir="${basedir}/static_lib">
			<include name="**/*.jar"/>
			<include name="**/*.zip"/>
		</fileset>
	</path>	

	<path id="testing.classpath">
		<pathelement path="${java.class.path}/" />
		
		<!-- source and compiled java files -->
		<pathelement location="${war.classes}" />
		<pathelement location="${bin.dir}" />

		<fileset dir="${lib.dir}/testing">
			<include name="**/*.jar"/>
			<include name="**/*.zip"/>
		</fileset>

		<fileset dir="${basedir}/static_lib">
			<include name="**/*.jar"/>
			<include name="**/*.zip"/>
		</fileset>
	</path>

	<path id="enhance.classpath">

		<!-- Quell und Ziel Java-Dateien -->
		<pathelement location="${war.classes}" />
		<pathelement location="${src.dir}" />

		<path refid="compile.classpath"/>
	</path>

	<target name="resolve" depends="_do_ivy_resolve,_def_tasks" description="resolve and download dependencies with ivy"/>
	
	<target name="_do_ivy_resolve">
		<!-- Ivy Einstellungen einbinden -->
		<ivy:settings file="${ivy.settings.file}" />
	    <ivy:resolve />
		<ivy:retrieve  pattern="${lib.dir}/[conf]/[artifact]-[revision](-[classifier]).[ext]" sync="true"/>
	    <ivy:report todir="${ivy.dir}/reports"/>
	</target>

    <target name="_def_tasks">
		<!-- after (hopefully) retrieving all dependencies, add the tasks -->

    	<!-- Emma -->
		<taskdef classpathref="testing.classpath" resource="emma_ant.properties" />

	    <!-- JUnit -->
		<taskdef name="junit" classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTask"
				 classpathref="testing.classpath" />
		<!-- Checkstyle -->
		<taskdef resource="checkstyletask.properties"   classpathref="testing.classpath"/>

		<!-- svn task -->
		<typedef resource="com/googlecode/svntask/svntask.xml"  classpathref="testing.classpath"/>

		<!-- load the JDO/JPA enhancer task. -->
		<taskdef name="datanucleusenhancer" classpathref="compile.classpath" classname="org.datanucleus.enhancer.tools.EnhancerTask" />
    </target>


	<target name="clean" description="delete the target folders">
		<delete dir="${war.classes}" />
		<delete dir="${war.lib}" failonerror="false" />
		<delete dir="${bin.dir}"/>
	</target>


	<!-- Target:init | set up the needed folder hierarchy and copy the runtime jars
	                 into the war lib folder
	  -->
	<target name="init">

		<!-- folder for the classes in the war -->
		<mkdir dir="${war.classes}" />

		<!-- folder for all other derived/compiled files -->
		<mkdir dir="${bin.dir}"/>
		
		<!-- copy settings and config files from src/, i.e. every thing that 
		     is not a java source file 
		  -->
		<copy includeemptydirs="false" todir="${war.classes}">
			<fileset dir="src">
				<exclude name="**/*.launch" />
				<exclude name="**/*.java" />
			</fileset>
		</copy>

		<mkdir dir="${war.lib}" />

		<!-- copy all runtime jars into the wars lib folder -->
		<copy includeemptydirs="false" todir="${war.lib}">
			<fileset dir="${lib.dir}/runtime">
				<exclude name="*-source*"/>
				<exclude name="*-javadoc*"/>
			</fileset>
			<!-- the gwt builder requires this jar -->
			<fileset dir="${lib.dir}/runtime">
				<include name="validation-api-*-sources.jar"/>
			</fileset>
		</copy>
	</target>

    <!--  Target: prep-dirs for testing -->
    <target name="prep-dirs">
        <mkdir dir="${build.dir}"/>
    	<mkdir dir="${instrumented.bindir}"/>
		<mkdir dir="${test-report.dir}"/>
    	<mkdir dir="${coverage.dir}"/>
    </target>


	<!-- Target:revisionNumber | write the current SVN revision number into a 
	     valid java class file, so the application can read its own version  
	  -->
	<target name="revisionNumber" depends="resolve">
		
        <svn>
        	<info path="${basedir}" committedRevisionProperty="revisionVersion" />
        </svn>
		<tstamp>
			<format property="TODAY" pattern="EEE, d-MMMM-yyyy HH:mm:ss z" locale="ENGLISH, GERMANY" />
		</tstamp>
		<echo>Revision Number: ${revisionVersion}</echo>
        <echo file="${src.dir}/org/timadorus/webapp/util/RevisionInfo.java">
            package org.timadorus.webapp.util;
              public final class RevisionInfo {
              private RevisionInfo() {
              }
              public static final String REVISION_NUMBER = "${revisionVersion}";
              public static final String TIME_STAMP = "${TODAY}";
            }
        </echo>
	</target>

	<!-- Target:java-compile | Kompilieren der Javaklassen (führt vorher die Tasks clean und init aus) -->
	<target name="java-compile" depends="clean,init,resolve,revisionNumber,_do_java-compile"/>
	
    <target name="_do_java-compile">

		<!-- Aufruf zum Kompilieren -->
		<javac debug="true" debuglevel="${debuglevel}" destdir="${war.classes}" source="${source}" target="${target}">

			<!-- Quellordner -->
			<src path="src" />

			<!-- Zugehöriger Classpath (Definition siehe oben) -->
			<classpath refid="compile.classpath" />
		</javac>
	</target>

	<!-- Target:test-checkstyle | run the checkstyle test -->
	<target name="test-checkstyle">
		<sequential>
			<mkdir dir="${basedir}/test-results" />
			<checkstyle config="${basedir}/checkstyle.xml" failOnViolation="true">
				<formatter type="plain" />
				<formatter type="xml" toFile="${basedir}/test-results/checkstyle-log.xml" />
				
				<fileset dir="${src.dir}" includes="**/*.java" />
				<fileset dir="${test-src.dir}" includes="**/*.java" />
				
				<!--property key="checkstyle.cache.file" file="${build.dir}/checkstyle-cache" /-->
			</checkstyle>
		</sequential>
	</target>

	<!-- ================================= 
          target: instrument java              
         ================================= -->
	<target name="instrument-java" depends="resolve">
		<emma enabled="true">
			<instr instrpath="${bin.dir}" destdir="${instrumented.bindir}" metadatafile="${coverage.dir}/metadata.emma" merge="true">
				<filter excludes="au.com.jenisys.view.*" />
			</instr>
			<instr instrpath="${war.classes}" destdir="${instrumented.bindir}" metadatafile="${coverage.dir}/metadata.emma" merge="true">
				<filter excludes="au.com.jenisys.view.*" />
			</instr>
		</emma>
	</target>

	<!-- Target: compile the test code -->
	<target name="test-compile" depends="clean,init">

		<!-- run the compilation -->
		<javac debug="true" debuglevel="${debuglevel}" destdir="${bin.dir}" source="${source}" target="${target}">

			<!-- source folder -->
			<src path="test-src" />

			<!-- appropriate classpath from above  -->
			<classpath refid="testing.classpath" />
		</javac>
	</target>


	<!-- ================================= 
          target: test-java              
         ================================= -->
    <target name="test-java" depends="test-compile,instrument-java,installDB" description="set up and run all tests">
    	<junit fork="yes" haltonfailure="yes" showoutput="on">
    		<classpath>
    			<pathelement path="${instrumented.bindir}"/>
    			<path refid="testing.classpath"/>
    		</classpath>
    		<jvmarg value="-XX:-UseSplitVerifier"/><!-- to make emma work with Java7 -->
    		<formatter type="xml"/>
    		<formatter type="plain" usefile="false"/>
    		<test name="org.timadorus.webapp.tests.TimadorusWebAppSmokeTest"
    			todir="${test-report.dir}"/>
   		</junit>

		<!-- prepare the coverage report -->
		<move todir="${coverage.dir}">
			<fileset dir="${basedir}">
    			<filename name="coverage.ec" />
    		</fileset>
    	</move>
    	<emma enabled="true">
    		<report sourcepath="${src.dir}" depth="method">
    			<fileset dir="${coverage.dir}">
    				<include name="*.emma" />
    				<include name="*.ec" />
    			</fileset>
    			<html outfile="${coverage.dir}/coverage.html" />
    			<xml outfile="${coverage.dir}/coverage.xml" />
    		</report>
    	</emma>
    </target>

	<property name="selenium.properties" value="selenium.properties"/>
   	<property file="${test-src.dir}/${selenium.properties}"/>

	<target name="_do_test_selenium_server_status">
		<!-- Is the web-app-server running? -->
    	<fail message="No Web-App-Server running">
   			<condition>
   				<not>
					<socket port="${Selenium.WebApp.Port}" server="${Selenium.WebApp.Host}" />
 				</not>
  			</condition>
		</fail>
		
		<!-- Is the site availbale? -->
		<fail message="Site not availbale">
   			<condition>
			 	<not>
	 				<http url="${Selenium.WebApp.Root}" />
	 			</not>
 			</condition>
		</fail>
		
		<!-- Is the selenium grid server running? -->
		<fail message="No selenium grid server running">
   			<condition>
   				<not>
   					<socket port="${Selenium.GridServer.Port}" server="${Selenium.GridServer.Host}" />
 				</not>
  			</condition>
		</fail>
		
		<!-- Is a grid node launched? -->
		<fail message="No selenium grid node launched">
   			<condition>
   				<not>
   					<socket port="${Selenium.GridNode.Port}" server="${Selenium.GridNode.Host}" />
 				</not>
  			</condition>
		</fail>
	</target>

    <!-- ================================= 
          target: test-acceptance             
         ================================= -->
    <target name="test-acceptance" depends="enhance,test-compile,_do_test_selenium_server_status" description="set up and run all acceptance tests">
		<copy file="${test-src.dir}/${selenium.properties}" todir="${bin.dir}"/>
	 
    	<junit fork="yes" haltonfailure="yes" showoutput="on">
    		<classpath>
    			<pathelement path="${instrumented.bindir}"/>
    			<path refid="testing.classpath"/>
    		</classpath>
    		<formatter type="xml"/>
    		<formatter type="plain" usefile="false"/>
    		<test name="org.timadorus.webapp.tests.acceptance.TimadorusWebAppAcceptanceTest"
    			todir="${test-report.dir}"/>
   		</junit>
    </target>

	<!-- Target:enhance | run the byte enhancement of the required java classes 
	     to be used as entities with JDO/JPA 
	  -->
	<target name="enhance" depends="java-compile,_do_enhance" description="DataNucleus enhancement"/>
	
	<target name="_do_enhance" depends="_def_tasks">

		<!-- run the enhancement -->
		<datanucleusenhancer failonerror="true" verbose="true">
			<classpath refid="enhance.classpath" />

			<!-- path to files that are to be considered for enhancement -->
			<fileset dir="${war.classes}">
				<include name="org/timadorus/webapp/beans/**" />
				<include name="org/timadorus/webapp/server/Configuration.class" />
				
				<!--include name="**/Character.class" />
				<include name="**/Faction.class" />
				<include name="**/Race.class" />
				<include name="**/CClass.class" /-->
			</fileset>
		</datanucleusenhancer>
	</target>


	<!-- Target:gwt-compile | compile gwt java classes to JavaScript code -->
	<target name="gwt-compile">

		<!-- run compilation macro -->
		<gwtCompile module="org.timadorus.webapp.TimadorusWebApp" classpathref="TimadorusWebApp.classpath"/>
	</target>

	<!-- Makro:gwtCompile | create macro for creating  -->
	<macrodef name="gwtCompile">

		<!-- define parameters -->
		<attribute name="module" />
		<attribute name="classpathref"/>

		<!-- run task in sequential order -->
		<sequential>

			<!-- run gwt compiler for supplied entry point -->
			<java classpathref="@{classpathref}" classname="com.google.gwt.dev.Compiler" fork="true" failonerror="true">
				<arg value="@{module}" />
			</java>
		</sequential>
	</macrodef>

	<!-- Task:cleanDB | clean old database -->
	<target name="cleanDB">
    	<delete dir="${db.dir}" quiet="true" />
 	</target>
	
	<!-- Task:installDB | set up the database -->
	<target name="installDB" depends="cleanDB">
		  <java fork="true" classname="org.apache.derby.tools.ij" classpathref="TimadorusWebApp.classpath">
		    <sysproperty key="ij.connection.db" value="jdbc:derby:${db.dir};create=true" />
		  	<sysproperty key="ij.user" value="webapp" />
		  	<sysproperty key="ij.password" value="ty32re8pu" />
		    <arg value="${sql.dir}/installdb.sql"/>
		  </java>
	</target>

	<!-- - - - - - - - - - - - - - - - - - 
          target: manageDB                      
         - - - - - - - - - - - - - - - - - -->
    <target name="manageDB">
  	  <java fork="true" classname="org.apache.derby.tools.ij" classpathref="TimadorusWebApp.classpath">
  	    <sysproperty key="ij.connection.db" value="jdbc:derby:${db.dir};create=true" />
  	  	<sysproperty key="ij.user" value="webapp" />
  	  	<sysproperty key="ij.password" value="ty32re8pu" />
  	  </java>            
    </target>

	<!-- Task:embeddedServer | set up the embedded server jar -->
	<target name="embeddedServer" description="--> Creates self-executing jar" depends="enhance,gwt-compile,_do_embeddedServer" />		

	<!-- only to be used in development, for already set up projects. -->
	<target name="_quick_gwt_server" depends="_do_java-compile,_do_enhance,gwt-compile,_do_embeddedServer">
    </target>
	
	<!-- actually build the embedded Server -->
    <target name="_do_embeddedServer">
		<property name="tmpServer.dir" location="${basedir}/tmpServer" />
		<property name="dbFolder.dir" location="${basedir}/tmpServer/TimadorusDB" />

		<!-- create a temporary folder -->
		<mkdir dir="${tmpServer.dir}" />
		
		<!-- create a folder for the DB -->
		<mkdir dir="${dbFolder.dir}" />
		
		<!-- copy database version file to db folder -->
		<copy todir="${db.dir}">
	      <fileset dir="${sql.dir}">
	        <include name="**/version" />
	      </fileset>
	    </copy>
		
		<!-- unpack the winstone server into the temporary folder -->
		<!-- <unjar dest="${tmpServer.dir}">
			<fileset dir="${lib.dir}/compile">
				<include name="winstone-0.9.10-hudson-24.jar" />
			</fileset>
		</unjar> -->

		<!-- copy changed winstone launcher class file to winstone folder -->
		<!-- <copy todir="${tmpServer.dir}/winstone">
	      <fileset dir="${sql.dir}">
	        <include name="**/Launcher.class" />
	      </fileset>
	    </copy> -->
	    
	    <!-- Copy files from war.dir to tmpServer.dir -->
	    <copy todir="${tmpServer.dir}">
	        <fileset dir="${war.dir}"></fileset>
	    </copy>
		
		<!-- build the server .war -->
		<!-- <zip destfile="${tmpServer.dir}/embedded.war" basedir="${war.dir}" /> -->

		<!-- copy and zip the db to the home root -->
		<zip destfile="${dbFolder.dir}.zip" basedir="${db.dir}" />
		
		<!-- create jar with server and wepapp from the tmpServer.dir -->
		<!-- <zip destfile="${basedir}/timadorusWebapp.jar" basedir="${tmpServer.dir}" /> -->
		
		<!-- Pack files into a war file -->
		<war destfile="${basedir}/timadorusWebapp.war" basedir="${tmpServer.dir}" />

		<!-- delete the temporary folder -->
		<delete dir="${tmpServer.dir}" />
		
		<!-- <war destfile="${basedir}/timadorusWebapp.war" /> -->

	</target>

	<!-- Target:publishEmbeddedServer | put resultant jar into repository as snapshot -->
	<target name="publishEmbeddedServer" description="--> Publish self-executing jar into repository">
		<ivy:publish pubrevision="${pub.version}-SNAPSHOT" status="${pub.status}" resolver="${pub.snapshot.resolver}" overwrite="true" update="true">
			<artifacts pattern="${basedir}/[artifact].[ext]" />
		</ivy:publish>
	</target>

	<!-- Target:publishEmbeddedServer-release | put resultant jar into repository as release version -->
	<target name="publishEmbeddedServer-release" description="--> Publish self-executing jar into repository">
		<ivy:publish pubrevision="${pub.version}" status="${pub.status}" resolver="${pub.release.resolver}" overwrite="true">
			<artifacts pattern="${basedir}/[artifact].[ext]" />
		</ivy:publish>
	</target>

	<!-- Target:build | define the order of the targets run to fullfill the build -->
	<target name="build" depends="resolve,test-checkstyle,enhance,gwt-compile,test-java, embeddedServer" />
	<!-- Old build with embeddedServer:
	<target name="build" depends="resolve,test-checkstyle,enhance,gwt-compile,test-java,embeddedServer" /> 
	-->
</project>